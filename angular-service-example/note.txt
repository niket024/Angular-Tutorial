Angular 8 Services
===================
Angular Service contains the various methods and functions to manage the data arriving from the server.

Why Angular Service Class?
=========================
To handle the features that are separate from components such as authentication, CRUD operations.
To share the data among various components in an Angular app.
To make the Testing and Debugging simple.
To write the re-usable code to centrally organise the application.

What is Angular Service?
========================
Most of the time, we get into the situation where we need to use the same code again and again. 
Using repetitive code in multiple components becomes a headache.

When the size of an Angular application gets bigger, then It almost becomes difficult to 
manage the code base of our app. In this scenario,
the best practice will be to write the reusable code.

Creating Service Class
=======================
ng generate service Calc

@Injectable(): 
===============
Decorator that marks a class as available to be provided and injected as a dependency.

providedIn:
============
The metadata, providedIn: 'root', means that the Service is visible throughout the application.

Dependency injection in Angular
===============================
Dependencies are services or objects that a class needs to perform its function. Dependency injection, or DI, 
is a design pattern in which a class requests dependencies from external sources rather than creating them.

Angular's DI framework provides dependencies to a class upon instantiation. 
You can use Angular DI to increase flexibility and modularity in your applications.

RxJs
======
Reactive programming is an asynchronous 
programming paradigm concerned with data streams and the propagation of change

The full form of RxJS is Reactive Extension for Javascript.
It is a javascript library that uses observables to work with reactive 
programming that deals with asynchronous data calls, callbacks and event-based programs. 
RxJS can be used with other Javascript libraries and frameworks. 
It is supported by javascript and also with typescript.

Features of RxJS
==================
Observable
An observable is a function that creates an observer and attaches it to the source where values are expected, 
for example, clicks, mouse events from a dom element or an Http request, etc.

Observer
It is an object with next(), error() and complete() methods, that will get called when there is 
interaction to the with the observable i.e. the source interacts for an example button click, 
Http request, etc.

Subscription
When the observable is created, to execute the observable we need to subscribe to it. 
It can also be used to cancel the execution.

Operators
An operator is a pure function that takes in observable as input and the output is also an observable.

Subject
A subject is an observable that can multicast i.e. talk to many observers. 
Consider a button with an event listener, the function attached to the event using 
addlistener is called every time the user clicks on the button similar functionality goes for subject too.

Schedulers
A scheduler controls the execution of when the subscription has to start and notified.

When to use RxJS?
=================
If your project consists of lots of async task handling than RxJS is a good choice. 
It is loaded by default with the Angular project.

Advantages of using RxJS
===========================
The following are the advantages of using RxJS −

RxJS can be used with other Javascript libraries and frameworks. 
It is supported by javascript and also with typescript. 
Few examples are Angular, ReactJS, Vuejs, nodejs etc.

RxJS is an awesome library when it comes to the handling of async tasks.
RxJS uses observables to work with reactive programming that deals with asynchronous data calls, \
callbacks and event-based programs.

RxJS offers a huge collection of operators in mathematical, transformation, filtering, utility, 
conditional, error handling, join categories that makes life easy when used with reactive programming.

Disadvantages of using RxJS
===========================
The following are the disadvantages of using RxJS −

Debugging the code with observables is little difficult.

As you start to use Observables, you can end up your full code wrapped under the observables.