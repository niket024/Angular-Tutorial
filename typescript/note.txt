TypeScript Tutorial
--------------------
TypeScript lets you write JavaScript the way you really want to. 
TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. 
TypeScript is pure object oriented with classes, interfaces and statically typed like C# or Java. 
The popular JavaScript framework Angular 2.0 is written in TypeScript. 
Mastering TypeScript can help programmers to write object-oriented programs and have them compiled to 
JavaScript, both on server side and client side.

By definition, “TypeScript is JavaScript for application-scale development.”

TypeScript is a strongly typed, object oriented, compiled language.

Installation:
--------------------
Step-1: download node and Install
 https://nodejs.org/en/download
Step-2:To verify if the installation was successful, enter the command in the terminal window.
 node –v
Step-3: install TypeScript.
npm install -g typescript


Sample program
---------------
Step-1: 
var message:string = "Hello World" 
console.log(message)
Step-2:
Save filename.ts
Step-3:
compile: tsc filename.ts
Step-4:
run: node filename.js

To Enable auto compile
-----------------------
tsc -w filename.ts

Note: Running npm command within Visual Studio Code
press Ctrl+P, write ext install npm script runner


Identifiers in TypeScript
---------------------------
Identifiers are names given to elements in a program like variables, functions etc.

TypeScript ─ Keywords
---------------------
Keywords have a special meaning in the context of a language
break	as	any	switch
case	if	throw	else
var	number	string	get
module	type	instanceof	typeof
public	private	enum	export
finally	for	while	void
null	super	this	new
in	return	true	false
any	extends	static	let
package	implements	interface	function
new	try	yield	const
continue	do	catch


TypeScript is Case-sensitive
------------------------------
TypeScript is case-sensitive. This means that TypeScript differentiates between uppercase and lowercase characters.

Semicolons are optional
--------------------------
Each line of instruction is called a statement. Semicolons are optional in TypeScript.

Comments in TypeScript
----------------------
Single-line comments ( // ) − Any text between a // and the end of a line is treated as a comment

Multi-line comments (/* */) − These comments may span multiple lines.

TypeScript - Types
------------------
The Any type
The any data type is the super type of all types in TypeScript. 
It denotes a dynamic type. Using the any type is equivalent to opting out of type checking for a variable.

Built-in types
The following table illustrates all the built-in types in TypeScript −

Data     type	Keyword	Description
----     -----  ----------------------
Number	number	Double precision 64-bit floating point values. It can be used to represent both, integers and fractions.
String	string	Represents a sequence of Unicode characters
Boolean	boolean	Represents logical values, true and false
Void	void	Used on function return types to represent non-returning functions
Null	null	Represents an intentional absence of an object value.
Undefined	undefined	Denotes value given to all uninitialized variables
Note − There is no integer type in TypeScript and JavaScript.

Null and undefined ─ Are they the same?

User-defined Types
-----------------
User-defined types include Enumerations (enums), classes, interfaces, arrays, and tuple. 
These are discussed in detail in the later chapters.

TypeScript - Variables
------------------------
A variable, by definition, is “a named space in the memory” that stores values.

Type Assertion in TypeScript
----------------------------
TypeScript allows changing a variable from one type to another. 
TypeScript refers to this process as Type Assertion. The syntax is to put the target type 
between < > symbols and place it in front of the variable or expression.

Inferred Typing in TypeScript
-----------------------------
Given the fact that, Typescript is strongly typed, this feature is optional. 
TypeScript also encourages dynamic typing of variables. This means that, 
TypeScript encourages declaring a variable without a type. In such cases, 
the compiler will determine the type of the variable on the basis of the value assigned to it. 
TypeScript will find the first usage of the variable within the code, 
determine the type to which it has been 
initially set and then assume the same type for this variable in the rest of your code block.


TypeScript Variable Scope
--------------------------
The scope of a variable specifies where the variable is defined. 
The availability of a variable within a program is determined by its scope. 
TypeScript variables can be of the following scopes −

Global Scope − Global variables are declared outside the programming constructs. 
These variables can be accessed from anywhere within your code.

Class Scope − These variables are also called fields. 
Fields or class variables are declared within the class but outside the methods. 
These variables can be accessed using the object of the class. Fields can also be static. 
Static fields can be accessed using the class name.

Local Scope − Local variables, as the name suggests, are declared within the constructs like methods, 
loops etc. Local variables are accessible only within the construct where they are declared.






Basic and fundamental
-----------------------
export {};
let message = 'Welcome back!';
console.log(message);

// Variable Declaration
let x = 10;
const y = 20;

let sum;
const title = 'Codevolution';

// Basic Variable Types
let isBeginner: boolean = true;
let total: number = 0;
let name: string = 'Vishwas';

let sentence: string = `My name is ${name}
I am a beginner in TypeScript`;

console.log(sentence);

// Sub types
let n: null = null;
let u: undefined = undefined;

let isNew: boolean = null;
let myName: string = undefined;

// Array type

let list1: number[] = [1, 2, 3];
let list2: Array<number> = [1, 2, 3];


// Tuple type

let person1: [string, number] = ['Chris', 22];

// Enum type
enum Color {Red, Green, Blue}
let c: Color = Color.Green;
console.log(c);

// Any type
let randomValue: any = 10;
randomValue = true;
randomValue = 'Vishwas';

// Unknown type
let myVariable: any = 10;
console.log(myVariable.name.firstName);
myVariable();
myVariable.toUpperCase();

// Type inference
let a;
a = 10;
a = true;

let b = 10;

// Union Types
let multiType: number | boolean;
multiType = 20;
multiType = true;

let anyType: any;
anyType = 20;
anyType = true;

// Functions

function add(num1: number, num2: number = 10): number {
  if (num2)
    return num1 + num2;
  else
    return num1;
}

add(5, 10);
add(5);

// Interfaces

interface Person {
  firstName: string;
  lastName?: string;
}

function fullName(person: Person) {
  console.log(person.firstName + ' ' + person.lastName);
}

let p = {
  firstName: 'Bruce'
};
fullName(p);

// Classes

class Employee {
  employeeName: string;

  constructor(name: string) {
    this.employeeName = name;
  }

  greet() {
    console.log('Good morning ' + this.employeeName);
  }
}

let emp1 = new Employee('Vishwas');
console.log(emp1.employeeName);
emp1.greet();

class Manager extends Employee{
  constructor(managerName: string) {
    super(managerName);
  }
  delegateWork() {
    console.log('Manager delgating tasks' + this.employeeName);
  }
}

let m1 = new Manager('Bruce');
m1.delegateWork();
m1.greet();
console.log(m1.employeeName);