Angular 8 Forms
================
Angular forms are used to handle user's input. We can use Angular form in our application to 
enable users to log in, to update profile, to enter information, and to perform many other data-entry tasks.

In Angular 8, there are 2 approaches to handle user's input through forms:

1. Reactive forms
2. Template-driven forms
Both approaches are used to collect user input events from the view, validate the user input, 
create a form model and data model to update, and provide a way to track changes.

Reactive Forms vs. Template-driven Forms
Both Reactive forms and Template-driven forms manage and process data differently. Each offers different advantages.

Reactive Forms
===============
Reactive forms are more robust.
Reactive forms are more scalable, reusable, and testable.
They are most preferred to use if forms are a key part of your application, 
or your application is already built using reactive patterns. In both cases, 
reactive forms are best to use.

Template-driven Forms
====================
Template-driven forms are best if you want to add a simple form to your application. 
For example: email list signup form.
Template-driven forms are easy to use in the application but they are not as scalable as Reactive forms.
Template-driven forms are mainly used if your application's requires a very basic form and logic. 
It can easily be managed in a template.

Angular 8 - Routing
===================
Routing basically means navigating between pages.
In a single-page app, you change what the user sees by showing or hiding portions of the 
display that correspond to particular components, rather than going out to the server to get a new page. 
As users perform application tasks, they need to move between the different views that you have defined.

Generate an app with routing 
============================
ng new routing-app --routing

aap-routing.module.ts file will be created

include router in app.module.ts
eg. import { RouterModule} from '@angular/router';

Here, the RouterModule is imported from angular/router. 
The module is included in the imports as shown below âˆ’

RouterModule.forRoot([
   {
      path: 'new-cmp',
      component: NewCmpComponent
   }
])
RouterModule refers to the forRoot which takes an input as an array, which in turn has the 
object of the path and the component. Path is the name of the router and component is 
the name of the class, i.e., the component created.

<a routerLink = "new-cmp">New component</a>
=============================================
This will navigate to the new component

<router-outlet> </router-outlet>.
===============================
When a user clicks new component, the page should display the content. For this, 
we need the following tag - <router-outlet> </router-outlet>.
This tag ensures that the content in the new-cmp.component.html will be 
displayed on the page when a user clicks new component.


Adding bootstrap in Angular
===========================
npm install bootstrap --save 
Now, include the bootstrap 4 inside the angular.json file inside styles array.

"styles": [  
    "./node_modules/bootstrap/dist/css/bootstrap.min.css",  
    "src/styles.css"  
],  

Register the Reactive Forms Module

How to add a new component in existing application
===================================================
1. ng generate component component-name
eg. ng generate component registration
(it will generate all related class)
2. import in app.module.ts 
eg. import { RegistrationComponent } from './registration/registration.component';  
3. import in app-routing.module.ts 
eg. import { RegistrationComponent } from './registration/registration.component';  
4. add the path and component in app-routing.module.ts 
eg. 
const routes: Routes = [  
  {  
    path: 'registration',  
    component: RegistrationComponent  
  }
  
];  

5. add <router-outlet></router-outlet>  in app.component.html
