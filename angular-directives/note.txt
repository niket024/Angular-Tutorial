Angular 8 Directives
--------------------
The Angular 8 directives are used to manipulate the DOM. By using Angular directives, 
you can change the appearance, 
behavior or a layout of a DOM element. It also helps you to extend HTML.

Angular 8 directives can be classified in 3 categories based on how they behave:

1. Component Directives
2. Structural Directives
3. Attribute Directives

Component Directives: 
--------------------
Component directives are used in main class. 
They contain the detail of how the component should be processed, instantiated and used at runtime.
eg. @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

Structural Directives:
-----------------------
Structural directives start with a * sign. These directives are used to manipulate and change the structure of the DOM elements. 
For example, *ngIf directive, *ngSwitch directive, and *ngFor directive.

*ngIf Directive: The ngIf allows us to Add/Remove DOM Element.
*ngSwitch Directive: The *ngSwitch allows us to Add/Remove DOM Element. 
It is similar to switch statement of C#.
*ngFor Directive: The *ngFor directive is used to repeat a portion of HTML 
template once per each item from an iterable list (Collection).

Attribute Directives: 
----------------------
Attribute directives are used to change the look and behavior of the DOM elements. 
For example: ngClass directive, and ngStyle directive etc.

ngClass Directive: The ngClass directive is used to add or remove CSS classes to an HTML element.
ngStyle Directive: The ngStyle directive facilitates you to modify the style of an HTML element 
using the expression. You can also use ngStyle directive to dynamically 
change the style of your HTML element.

Angular 8 ngIf Directive
-------------------------
The ngIf Directives is used to add or remove HTML Elements according to the expression. 
The expression must return a Boolean value. If the expression is false then the element is removed, 
otherwise element is inserted. 
It is similar to the ng-if directive of AngularJS.

Angular 8 *ngFor Directive
---------------------------
The *ngFor directive is used to repeat a portion of HTML template once per each item from an 
iterable list (Collection). The ngFor is an Angular structural directive and is similar to 
ngRepeat in AngularJS. 
Some local variables like Index, First, Last, odd and even are exported by *ngFor directive.

Angular 8 ngSwitch Directive
---------------------------
In Angular 8, ngSwitch is a structural directive which is used to Add/Remove DOM Element. 
It is similar to switch statement of C#. 
The ngSwitch directive is applied to the container element with a switch expression.

DOM manipulation
-----------------
What is the DOM?
The DOM is a W3C (World Wide Web Consortium) standard.

The DOM defines a standard for accessing documents:

"The W3C Document Object Model (DOM) is a platform and language-neutral interface that 
allows programs and scripts to dynamically access and update the content, 
structure, and style of a document."

look at the image DOM_architecture.gif

Note:
While working as the front-end developer, the most important point to focus is to 
manipulate the DOM as less as possible which in turns may improve the web performance.

Creating custom Directive
=============================
ng generate directive textDanger

DOM manipulate by Renderer2 service
====================================
old way (this.elRef.nativeElement.style.color = 'green') is not recommended because of security reason.
The Renderer2 class is an out of the box feature from Angular which provides an abstraction for
manipulating UI rendering elements of your app at runtime without the need to access the DOM directly. 
This is the best approach to consider because of some security reasons 
like XSS Attacks and also to be able to develop apps that can be rendered on various platforms 
that donâ€™t have direct DOM access, like servers, web workers or native mobile.

With the help of the Angular 7 Renderer2 service class you can perform simple DOM manipulations 
as well as complex one.

It is more convenient to use Renderer2 in custom directives because of 
how Angular directives are the main logical building block 
responsible for modifying elements.

Using Renderer2 class, you can add and remove CSS classes, styles, HTML attributes. 
It can be used to append or remove a child element within a parent element with 
Angular 7 Renderer2 class. You can add HTML comment to any parent element of the DOM easily. 
You can make elements listen to some defined events.


What Angular docs says about ElementRef :
===========================================
Use this API as the last resort when direct access to DOM is needed. 
Permitting direct access to the DOM can make your application more vulnerable to XSS attacks. 
Carefully review any use of ElementRef in your code. Use templating and data-binding provided by 
Angular instead. Alternatively you can take a look at Renderer which provides API that can safely 
be used even when direct access to native elements is not supported.
Relying on direct DOM access creates tight coupling between your application and rendering 
layers which will make it impossible to separate the two and deploy your application into a web worker.

look at the example
=======================
Example 1: setStyle - TextDangerDirective
Example 2: createElement / appendChild / createText - TextDangerDirective
Example 3: setAttribute / removeAttribute - DefaultInputDirective
Example 4: addClass / removeClass - AddRemoveClassDirective

Ref:https://angular.io/api/core/Renderer2